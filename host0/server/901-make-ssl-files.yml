#                  _                      _        __ _ _           
#  _ __ ___   __ _| | _____       ___ ___| |      / _(_) | ___  ___ 
# | '_ ` _ \ / _` | |/ / _ \_____/ __/ __| |_____| |_| | |/ _ \/ __|
# | | | | | | (_| |   <  __/_____\__ \__ \ |_____|  _| | |  __/\__ \
# |_| |_| |_|\__,_|_|\_\___|     |___/___/_|     |_| |_|_|\___||___/
#                                                                   
- hosts: all
  become: true
  become_user: root
  remote_user: deploy
  vars:
    fetchfile: true
    fetchinto: "../tmp/"
    directory: "/var/tmp/ssl"
    algorithm: "des3"
    certslist:
      - fileprefix: "EXAMPLE.JP"
        passphrase: "nekochan22"
        seckeysize: 2048
        expiration: 365
        x509:
          commonname: "example.jp"
          email:      "postmaster@example.jp"
          country:    "JP"
          state:      "Kyoto"
          city:       "Kyoto"
          company:    '"EXAMPLE Co. Ltd."'
          section:    '"Network System"'
  tasks:
    - name: make-ssl-files | RedHat | openssl command should be installed
      when: ansible_os_family == "RedHat"
      yum:
        name:  "openssl"
        state: "present"

    - name: make-ssl-files | Debian | openssl command should be installed
      when: ansible_os_family == "Debian"
      apt:
        name:  "openssl"
        state: "present"

    - name: make-ssl-files | FreeBSD | openssl command should be installed
      when: ansible_os_family == "FreeBSD"
      pkgng:
        name:  "openssl"
        state: "present"

    - name: make-ssl-files | {{ directory }}/ should be created
      file:
        path:  "{{ directory }}"
        mode:  "0755"
        owner: "root"
        state: "directory"

    - name: make-ssl-files | {{ directory }}/{{ item.x509.commonname }} should be created
      file:
        path:  "{{ directory }}/{{ item.x509.commonname }}"
        mode:  "0755"
        owner: "root"
        state: "directory"
      with_items: "{{ certslist }}"

    - name: make-ssl-files | Each private key should be created
      shell: >
        openssl genrsa -{{ algorithm }} -out {{ item.fileprefix }}-WITH-PASSPHRASE.KEY
        -passout pass:{{ item.passphrase }} {{ item.seckeysize }}
      args:
        chdir:   "{{ directory }}/{{ item.x509.commonname }}"
        creates: "{{ item.fileprefix }}-WITH-PASSPHRASE.KEY"
      with_items: "{{ certslist }}"

    - name: make-ssl-files | Each private key should be -r--------
      file:
        path:  "{{ directory }}/{{ item.x509.commonname }}/{{ item.fileprefix }}-WITH-PASSPHRASE.KEY"
        mode:  "0400"
        owner: "root"
      with_items: "{{ certslist }}"

    - name: make-ssl-files | Each private key should be readable with pass phrase
      register: check_rsa0
      changed_when: check_rsa0.rc > 0
      shell: >
        openssl rsa -in {{ item.fileprefix }}-WITH-PASSPHRASE.KEY -text
        -passin pass:{{ item.passphrase }}
      args:
        chdir: "{{ directory }}/{{ item.x509.commonname }}"
      with_items: "{{ certslist }}"

    - name: make-ssl-files | Each private key without passphrase should be created
      shell: >
        openssl rsa -in {{ item.fileprefix }}-WITH-PASSPHRASE.KEY 
        -out {{ item.fileprefix }}-WITHOUT-PASSPHRASE.KEY
        -passin pass:{{ item.passphrase }}
      args:
        chdir:   "{{ directory }}/{{ item.x509.commonname }}"
        creates: "{{ item.fileprefix }}-WITHOUT-PASSPHRASE.KEY"
      with_items: "{{ certslist }}"

    - name: make-ssl-files | Each private key without passphrase should be -r--------
      file:
        path:  "{{ directory }}/{{ item.x509.commonname }}/{{ item.fileprefix }}-WITHOUT-PASSPHRASE.KEY"
        mode:  "0400"
        owner: "root"
      with_items: "{{ certslist }}"

    - name: make-ssl-files | Each private key without pass phrase should be readable
      register: check_rsa1
      changed_when: check_rsa1.rc > 0
      shell: >
        openssl rsa -in {{ item.fileprefix }}-WITHOUT-PASSPHRASE.KEY -text
      args:
        chdir: "{{ directory }}/{{ item.x509.commonname }}"
      with_items: "{{ certslist }}"

    - name: make-ssl-files | Each private key for web server should be created
      shell: >
        cp -p {{ item.fileprefix }}-WITHOUT-PASSPHRASE.KEY {{ item.fileprefix }}.KEY
      args:
        chdir:   "{{ directory }}/{{ item.x509.commonname }}"
        creates: "{{ item.fileprefix }}.KEY"
      with_items: "{{ certslist }}"

    - name: make-ssl-files | Each private key for web servers should be readable without pass phrase
      register: check_rsa2
      changed_when: check_rsa2.rc > 0
      shell: openssl rsa -in {{ item.fileprefix }}.KEY -text
      args:
        chdir: "{{ directory }}/{{ item.x509.commonname }}"
      with_items: "{{ certslist }}"

    - name: make-ssl-files | Subject for each CSR should be created
      shell: >
        printf "/C=%s/ST=%s/L=%s/O=%s/OU=%s/CN=%s/emailAddress=%s/"
        '{{ item.x509.country }}' '{{ item.x509.state }}' '{{ item.x509.city }}'
        '{{ item.x509.company }}' '{{ item.x509.section }}'
        '{{ item.x509.commonname }}' '{{ item.x509.email }}'
        | tr -d '"' | tr -d "'" > {{ item.fileprefix }}.SUBJECT
      args:
        chdir:   "{{ directory }}/{{ item.x509.commonname }}"
        creates: "{{ item.fileprefix }}.SUBJECT"
      with_items: "{{ certslist }}"

    - name: make-ssl-files | Each CSR should be created
      shell: >
        openssl req -new -key {{ item.fileprefix }}.KEY -out {{ item.fileprefix }}.CSR 
        -days {{ item.expiration }}
        -subj "`cat {{ item.fileprefix }}.SUBJECT`"
      args:
        chdir:   "{{ directory }}/{{ item.x509.commonname }}"
        creates: "{{ item.fileprefix }}.CSR"
      with_items: "{{ certslist }}"

    - name: make-ssl-files | Each CSR should be validated
      register: check_csr
      changed_when: check_csr.rc > 0
      shell: openssl req -in {{ item.fileprefix }}.CSR -text
      args:
        chdir: "{{ directory }}/{{ item.x509.commonname }}"
      with_items: "{{ certslist }}"

    - name: make-ssl-files | Each self signed certificate should be created
      shell: >
        openssl x509 -req -in {{ item.fileprefix }}.CSR -days {{ item.expiration }}
        -signkey {{ item.fileprefix }}.KEY -out {{ item.fileprefix }}.CRT
      args:
        chdir:   "{{ directory }}/{{ item.x509.commonname }}"
        creates: "{{ item.fileprefix }}.CRT"
      with_items: "{{ certslist }}"

    - name: make-ssl-files | Each certificate should be validated
      register: check_crt
      changed_when: check_crt.rc > 0
      shell: openssl x509 -in {{ item.fileprefix }}.CRT -text
      args:
        chdir: "{{ directory }}/{{ item.x509.commonname }}"
      with_items: "{{ certslist }}"

    - name: make-ssl-files | Pass phrase should be saved in the file
      shell: >
        echo {{ item.passphrase }} > {{ item.fileprefix }}.PASSPHRASE && chmod 0400 {{ item.fileprefix }}.PASSPHRASE
      args:
        chdir:   "{{ directory }}/{{ item.x509.commonname }}"
        creates: "{{ item.fileprefix }}.PASSPHRASE"
      with_items: "{{ certslist }}"

    - name: make-ssl-files | Archive should be created
      shell: >
        tar cvfz {{ item.x509.commonname }}.tar.gz {{ item.x509.commonname }}/
      args:
        chdir:   "{{ directory }}"
        creates: "{{ item.x509.commonname }}.tar.gz"
      with_items: "{{ certslist }}"

    - name: make-ssl-files | Archive should be downloaded in the tmp/ directory
      when: fetchfile == true
      fetch:
        src:  "{{ directory }}/{{ item.x509.commonname }}.tar.gz"
        dest: "{{ fetchinto }}"
        flat: "yes"
      with_items: "{{ certslist }}"

    - name: make-ssl-files | CSR should be downloaded in the tmp/ directory
      when: fetchfile == true
      fetch:
        src:  "{{ directory }}/{{ item.x509.commonname }}/{{ item.fileprefix }}.CSR"
        dest: "/tmp/"
        flat: "yes"
      with_items: "{{ certslist }}"

