#                   __ _                                    _         _ 
#   ___ ___  _ __  / _(_) __ _ _   _ _ __ ___       ___ ___| |__   __| |
#  / __/ _ \| '_ \| |_| |/ _` | | | | '__/ _ \_____/ __/ __| '_ \ / _` |
# | (_| (_) | | | |  _| | (_| | |_| | | |  __/_____\__ \__ \ | | | (_| |
#  \___\___/|_| |_|_| |_|\__, |\__,_|_|  \___|     |___/___/_| |_|\__,_|
#                        |___/                                          
- hosts: all
  become: true
  become_user: root
  remote_user: deploy
  vars:
    sshd:
      execute:   true
      port:      "__NEW_SSHD_PORT_TO_BE_APPLIED__"
      rootlogin: "no"
  tasks:
    - block:
      - name: configure-sshd | Enable Port setting in /etc/ssh/sshd_config
        notify: Restart daemons
        replace:
          backup:   "yes"
          dest:     "/etc/ssh/sshd_config"
          regexp:   '^#Port (.+)'
          replace:  'Port \1'
          validate: 'sshd -t -f %s'
  
      - name: configure-sshd | Change sshd port setting
        when: sshd.port > 0 and sshd.port < 65535
        notify: Restart daemons
        register: rewrite_sshd_config
        replace:
          backup:   "yes"
          dest:     "/etc/ssh/sshd_config"
          regexp:   '^Port .+$'
          replace:  'Port {{ sshd.port }}'
          validate: 'sshd -t -f %s'
  
      - name: configure-sshd | Enable PermitRootLogin settings in /etc/ssh/sshd_config
        notify: Restart daemons
        replace:
          backup:   "yes"
          dest:     "/etc/ssh/sshd_config"
          regexp:   '^#PermitRootLogin (.+)'
          replace:  'PermitRootLogin \1'
          validate: 'sshd -t -f %s'
  
      - name: configure-sshd | Change PermitRootLogin setting
        when: rewrite_sshd_config is changed
        notify: Restart daemons
        replace:
          backup:    "yes"
          dest:      "/etc/ssh/sshd_config"
          regexp:    '^PermitRootLogin .+$'
          replace:   'PermitRootLogin {{ sshd.rootlogin }}'
          validate:  'sshd -t -f %s'

      - name: configure-sshd | RedHat | /etc/firewalld/services/ssh.xml(1)
        when: sshd.port > 0 and sshd.port < 65535 and ansible_os_family == "RedHat"
        notify: Restart daemons
        shell: cp -p /usr/lib/firewalld/services/ssh.xml .
        args:
          chdir:   "/etc/firewalld/services"
          creates: "ssh.xml"

      - name: configure-sshd | RedHat | /etc/firewalld/services/ssh.xml(2)
        when: sshd.port > 0 and sshd.port < 65535 and ansible_os_family == "RedHat"
        notify: Restart daemons
        replace:
          backup:   "no"
          dest:     "/etc/firewalld/services/ssh.xml"
          regexp:   'port="[0-9]+"/>'
          replace:  'port="{{ sshd.port }}"/>'

      - name: configure-sshd | RedHat | Open SSHd port on FirewallD
        when: sshd.port > 0 and sshd.port < 65535 and ansible_os_family == "RedHat"
        notify: Restart daemons
        firewalld:
          service:   "ssh"
          permanent: true
          zone:      "public"
          state:     "enabled"

      - name: configure-sshd | Debian | /etc/ufw/applications.d/openssh-server(1)
        when: sshd.port > 0 and sshd.port < 65535 and ansible_os_family == "Debian"
        notify: Enable ufw
        ufw:
          rule: "allow"
          name: "OpenSSH"

      - name: configure-sshd | Debian | /etc/ufw/applications.d/openssh-server(2)
        when: sshd.port > 0 and sshd.port < 65535 and ansible_os_family == "Debian"
        notify: Restart OpenSSH-Server
        replace:
          backup:   "no"
          dest:     "/etc/ufw/applications.d/openssh-server"
          regexp:   'ports=[0-9]+/'
          replace:  'ports={{ sshd.port }}/'
      when: sshd.execute == true

  handlers:
    - name: Restart daemons
      when: ansible_os_family == "RedHat"
      shell: >
        service sshd restart; service firewalld restart

    - name: Restart OpenSSH-Server
      when: ansible_os_family == "Debian"
      service:
        name:  "sshd"
        state: "restarted"

    - name: Enable ufw
      when: ansible_os_family == "Debian"
      ufw:
        policy: "deny"
        state:  "enabled"

